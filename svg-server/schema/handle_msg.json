{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleMsg",
  "description": "Handle messages",
  "anyOf": [
    {
      "description": "Create a viewing key",
      "type": "object",
      "required": [
        "create_viewing_key"
      ],
      "properties": {
        "create_viewing_key": {
          "type": "object",
          "required": [
            "entropy"
          ],
          "properties": {
            "entropy": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "Set a viewing key",
      "type": "object",
      "required": [
        "set_viewing_key"
      ],
      "properties": {
        "set_viewing_key": {
          "type": "object",
          "required": [
            "key"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "padding": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      }
    },
    {
      "description": "allows an admin to add more admins",
      "type": "object",
      "required": [
        "add_admins"
      ],
      "properties": {
        "add_admins": {
          "type": "object",
          "required": [
            "admins"
          ],
          "properties": {
            "admins": {
              "description": "list of address to grant admin priveleges",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HumanAddr"
              }
            }
          }
        }
      }
    },
    {
      "description": "allows an admin to remove admin addresses",
      "type": "object",
      "required": [
        "remove_admins"
      ],
      "properties": {
        "remove_admins": {
          "type": "object",
          "required": [
            "admins"
          ],
          "properties": {
            "admins": {
              "description": "list of address to revoke admin priveleges from",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HumanAddr"
              }
            }
          }
        }
      }
    },
    {
      "description": "add a new nft template",
      "type": "object",
      "required": [
        "add_template"
      ],
      "properties": {
        "add_template": {
          "type": "object",
          "required": [
            "template"
          ],
          "properties": {
            "template": {
              "$ref": "#/definitions/Template"
            }
          }
        }
      }
    },
    {
      "description": "add a new nft contract",
      "type": "object",
      "required": [
        "add_nft_contract"
      ],
      "properties": {
        "add_nft_contract": {
          "type": "object",
          "required": [
            "nft_contract"
          ],
          "properties": {
            "nft_contract": {
              "$ref": "#/definitions/ContractInfo"
            }
          }
        }
      }
    },
    {
      "description": "update the royalty info on an existing template",
      "type": "object",
      "required": [
        "set_royalty_info"
      ],
      "properties": {
        "set_royalty_info": {
          "type": "object",
          "required": [
            "template_name"
          ],
          "properties": {
            "royalty_info": {
              "description": "the new royalty information for this template.  If None, it will delete any existing royalties",
              "anyOf": [
                {
                  "$ref": "#/definitions/RoyaltyInfo"
                },
                {
                  "type": "null"
                }
              ]
            },
            "template_name": {
              "description": "name of the template to update",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "Mint an NFT for each buyer.  This can only be called by a listing contract this minter has created",
      "type": "object",
      "required": [
        "mint"
      ],
      "properties": {
        "mint": {
          "type": "object",
          "required": [
            "buyers",
            "option_id"
          ],
          "properties": {
            "buyers": {
              "description": "the buyers of a mint-on-demand NFT",
              "type": "array",
              "items": {
                "$ref": "#/definitions/HumanAddr"
              }
            },
            "option_id": {
              "description": "mint NFTs from the specified minting option",
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "start another mint run for any template that has reached its limit or does not have a limit",
      "type": "object",
      "required": [
        "re_release_nft"
      ],
      "properties": {
        "re_release_nft": {
          "type": "object",
          "required": [
            "template_name"
          ],
          "properties": {
            "minting_limit": {
              "description": "optional limit to how many clones will be minted for the next mint run",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "template_name": {
              "type": "string"
            }
          }
        }
      }
    },
    {
      "description": "create a mint-on-demand listing",
      "type": "object",
      "required": [
        "create_listing"
      ],
      "properties": {
        "create_listing": {
          "type": "object",
          "required": [
            "batch_send",
            "buy_contract",
            "closes_at",
            "entropy",
            "factory_contract",
            "label",
            "price"
          ],
          "properties": {
            "batch_send": {
              "description": "true if purchasing token implements BatchSend",
              "type": "boolean"
            },
            "buy_contract": {
              "description": "purchase contract code hash and address",
              "allOf": [
                {
                  "$ref": "#/definitions/ContractInfo"
                }
              ]
            },
            "closes_at": {
              "description": "timestamp after which the operator may close the listing. Timestamp is in seconds since epoch 01/01/1970",
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "description": {
              "description": "Optional free-form description of the listing",
              "type": [
                "string",
                "null"
              ]
            },
            "entropy": {
              "description": "entropy used for random viewing key generation",
              "type": "string"
            },
            "existing_template": {
              "description": "if selling from an existing template, the name of the template being sold.  If BOTH `existing_template` and `new_template` are supplied in the same tx, it will ignore the `existing template`",
              "type": [
                "string",
                "null"
              ]
            },
            "factory_contract": {
              "description": "factory contract code hash and address",
              "allOf": [
                {
                  "$ref": "#/definitions/ContractInfo"
                }
              ]
            },
            "label": {
              "description": "String label for the listing",
              "type": "string"
            },
            "new_template": {
              "description": "new template to add and use for the listing.  If BOTH `existing_template` and `new_template` are supplied in the same tx, it will ignore the `existing template`",
              "anyOf": [
                {
                  "$ref": "#/definitions/Template"
                },
                {
                  "type": "null"
                }
              ]
            },
            "payment_address": {
              "description": "optional address to send proceeds to if not the creator",
              "anyOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                },
                {
                  "type": "null"
                }
              ]
            },
            "price": {
              "description": "listing price",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "quantity_for_sale": {
              "description": "optional number of NFTs to mint before the listing will auto-close.  If not specified, the listing will remain open until the creator closes it by calling CancelListing or the closes time is reached",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      }
    },
    {
      "description": "register a listing address that will be allowed to request minting.  This will only be accepted from the factory address just called when doing the CreateListing",
      "type": "object",
      "required": [
        "register_listing"
      ],
      "properties": {
        "register_listing": {
          "type": "object",
          "required": [
            "listing_address"
          ],
          "properties": {
            "listing_address": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    },
    {
      "description": "disallow the use of a permit",
      "type": "object",
      "required": [
        "revoke_permit"
      ],
      "properties": {
        "revoke_permit": {
          "type": "object",
          "required": [
            "permit_name"
          ],
          "properties": {
            "permit_name": {
              "description": "name of the permit that is no longer valid",
              "type": "string"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "Authentication": {
      "description": "media file authentication",
      "type": "object",
      "properties": {
        "key": {
          "description": "either a decryption key for encrypted files or a password for basic authentication",
          "type": [
            "string",
            "null"
          ]
        },
        "user": {
          "description": "username used in basic authentication",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "ContractInfo": {
      "description": "code hash and address of a secret contract",
      "type": "object",
      "required": [
        "address",
        "code_hash"
      ],
      "properties": {
        "address": {
          "description": "contract's address",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        },
        "code_hash": {
          "description": "contract's code hash string",
          "type": "string"
        }
      }
    },
    "Extension": {
      "description": "metadata extension You can add any metadata fields you need here.  These fields are based on https://docs.opensea.io/docs/metadata-standards and are the metadata fields that Stashh uses for robust NFT display.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
      "type": "object",
      "properties": {
        "animation_url": {
          "description": "url to a multimedia attachment",
          "type": [
            "string",
            "null"
          ]
        },
        "attributes": {
          "description": "item attributes",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Trait"
          }
        },
        "background_color": {
          "description": "background color represented as a six-character hexadecimal without a pre-pended #",
          "type": [
            "string",
            "null"
          ]
        },
        "description": {
          "description": "item description",
          "type": [
            "string",
            "null"
          ]
        },
        "external_url": {
          "description": "url to allow users to view the item on your site",
          "type": [
            "string",
            "null"
          ]
        },
        "image": {
          "description": "url to the image",
          "type": [
            "string",
            "null"
          ]
        },
        "image_data": {
          "description": "raw SVG image data (not recommended). Only use this if you're not including the image parameter",
          "type": [
            "string",
            "null"
          ]
        },
        "media": {
          "description": "media files as specified on Stashh that allows for basic authenticatiion and decryption keys. Most of the above is used for bridging public eth NFT metadata easily, whereas `media` will be used when minting NFTs on Stashh",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/MediaFile"
          }
        },
        "name": {
          "description": "name of the item",
          "type": [
            "string",
            "null"
          ]
        },
        "protected_attributes": {
          "description": "list of attributes whose types are public but whose values are private",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "youtube_url": {
          "description": "url to a YouTube video",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "HumanAddr": {
      "type": "string"
    },
    "MediaFile": {
      "description": "media file",
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "authentication": {
          "description": "authentication information",
          "anyOf": [
            {
              "$ref": "#/definitions/Authentication"
            },
            {
              "type": "null"
            }
          ]
        },
        "extension": {
          "description": "file extension",
          "type": [
            "string",
            "null"
          ]
        },
        "file_type": {
          "description": "file type Stashh currently uses: \"image\", \"video\", \"audio\", \"text\", \"font\", \"application\"",
          "type": [
            "string",
            "null"
          ]
        },
        "url": {
          "description": "url to the file.  Urls should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
          "type": "string"
        }
      }
    },
    "Metadata": {
      "description": "token metadata",
      "type": "object",
      "properties": {
        "extension": {
          "description": "optional on-chain metadata",
          "anyOf": [
            {
              "$ref": "#/definitions/Extension"
            },
            {
              "type": "null"
            }
          ]
        },
        "token_uri": {
          "description": "optional uri for off-chain metadata.  This should be prefixed with `http://`, `https://`, `ipfs://`, or `ar://`",
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "Royalty": {
      "description": "data for a single royalty",
      "type": "object",
      "required": [
        "rate",
        "recipient"
      ],
      "properties": {
        "rate": {
          "description": "royalty rate",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "recipient": {
          "description": "address to send royalties to",
          "allOf": [
            {
              "$ref": "#/definitions/HumanAddr"
            }
          ]
        }
      }
    },
    "RoyaltyInfo": {
      "description": "all royalty information",
      "type": "object",
      "required": [
        "decimal_places_in_rates",
        "royalties"
      ],
      "properties": {
        "decimal_places_in_rates": {
          "description": "decimal places in royalty rates",
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "royalties": {
          "description": "list of royalties",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Royalty"
          }
        }
      }
    },
    "Template": {
      "description": "nft info used to mint clones",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "minting_limit": {
          "description": "optional limit to how many clones will be minted for the first mint run",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "name": {
          "description": "identifier for this template",
          "type": "string"
        },
        "nft_contract": {
          "description": "optional nft contract this template should use for minting",
          "anyOf": [
            {
              "$ref": "#/definitions/ContractInfo"
            },
            {
              "type": "null"
            }
          ]
        },
        "private_metadata": {
          "description": "optional private metadata that can only be seen by the owner and whitelist",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "public_metadata": {
          "description": "optional public metadata that can be seen by everyone",
          "anyOf": [
            {
              "$ref": "#/definitions/Metadata"
            },
            {
              "type": "null"
            }
          ]
        },
        "royalty_info": {
          "description": "optional royalty information for this token",
          "anyOf": [
            {
              "$ref": "#/definitions/RoyaltyInfo"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "Trait": {
      "description": "attribute trait",
      "type": "object",
      "required": [
        "value"
      ],
      "properties": {
        "display_type": {
          "description": "indicates how a trait should be displayed",
          "type": [
            "string",
            "null"
          ]
        },
        "max_value": {
          "description": "optional max value for numerical traits",
          "type": [
            "string",
            "null"
          ]
        },
        "trait_type": {
          "description": "name of the trait",
          "type": [
            "string",
            "null"
          ]
        },
        "value": {
          "description": "trait value",
          "type": "string"
        }
      }
    },
    "Uint128": {
      "type": "string"
    }
  }
}
